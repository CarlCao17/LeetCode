
# Q1: 如何设计一个高并发高可用的系统?
》做一个千万级的秒杀系统
设计过程：中间遇到哪些问题，如何解决
不能超卖，不能漏卖

## 明确问题和应用场景
目标是：

## 系统架构设计
1. 整体架构
	用户 -> CDN -> 负载均衡 -> 网关 -> 业务服务集群 -> 缓存层 -> 数据库
2. 核心组件设计
	前端优化层
		- CDN 加速
		- 页面静态化
		- 前端限流
	网关与负载均衡
		- 使用 Ngnix 作为 API 网关
		- 实现 IP 限流、用户限流
		- 负载均衡策略：一致性哈希，保证用户请求分发到固定服务器
	业务服务层
		- 微服务架构：用户服务、商品服务、订单服务、支付服务
		- 服务治理：限流，超时，熔断，
		- 一部处理
	缓存架构
		- 多级缓存：浏览器缓存 -> CDN -> Redis -> 本地缓存
		- 缓存预热：提前加载热点数据
		- 缓存更新策略：延迟双删、监听 binlog 更新 Redis
	数据存储
		- 读写分离：主库写、从库读
		- 分库分表：按用户 ID 或者商品 ID 分片
		- 消息队列：Redis Stream / RocketMQ 处理订单
3. 秒杀流程设计
	1. 库存扣减方案
	```sql
	UPDATE stock SET count = count - 1 WHERE product_id = ? AND count > 0
	```
	预扣库存模式
	- Redis 预扣：`DECR stock:product_id`
	- 异步补偿：定时任务同步实际库存
	- 防止超卖：Lua 脚本保证原子性

	2. 订单处理流程
	秒杀请求 -> 参数校验 -> 用户验证 -> 库存扣减 -> 生成订单 -> 异步支付
	关键控制点：
	- 用户验证：JWT token + Redis session （不一定要 redis session）？
	- 重复提交：Redis 分布式锁，key: `seckill:user:${user_id}:${product_id}`
	- 限流控制：令牌桶，漏桶算法
4. 遇到的问题与解决方案
问题 1: 缓存击穿、雪崩
现象：热点数据失效，

问题 2: 数据一致性

问题 3: 系统可用性

性能优化指标
- QPS 目标：千万
- 响应时间：95% < 100ms
- 可用性: 99.99%
- 准确性：绝对不超卖

	
# Q2: LLM 应用
	- Prompt 调优
	- Agent 动态决策，MCP 使用外部功能
	- RAG 外挂知识库，Oncall 机器人
	- Workflow 工作流
	- 文生图、
	Q2.1 Prompt 调优方法论：
	Q2.2 如何做好一个 RAG，怎么样让 RAG 更准确召回
	   - 分片
	   - 召回相似性

	Q2.3 Manus ❌
# Q3: 事务机制，隔离级别，如何实现事务；
	什么是事务，ACID
	RU, RC, RR, SR
	间隙锁，和记录锁的区别，使用场景
	
# 算法题：


# QA